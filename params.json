{"name":"Siesta","tagline":"REST management for iOS","body":"# Siesta\r\n\r\niOS REST Client Framework\r\n\r\n**TL;DR**: Drastically simplifies app code by providing a client-side cache of observable models for RESTful resources.\r\n\r\n* **OS:** iOS 8+\r\n* **Languages:** Written in Swift, supports Swift and Objective-C\r\n* **Build requirements:** Xcode 7 beta, Swift 2.0, Carthage\r\n* **License:** MIT\r\n* **Status:** Alpha, in active development. Works well, but API still in flux. Seeking feedback. Please experiment!\r\n\r\n\r\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\r\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\r\n**Overview**\r\n\r\n- [What’s It For?](#what%E2%80%99s-it-for)\r\n  - [The Problem](#the-problem)\r\n  - [The Solution](#the-solution)\r\n- [Features](#features)\r\n- [Design Philosophy](#design-philosophy)\r\n- [Installation](#installation)\r\n  - [Carthage](#carthage)\r\n  - [CocoaPods](#cocoapods)\r\n- [Basic Usage](#basic-usage)\r\n- [Examples](#examples)\r\n\r\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\r\n\r\n**Further Documentation**\r\n\r\n- [User Guide](Docs/index.md)\r\n- [API Docs](https://bustoutsolutions.github.io/siesta/api/)\r\n- [Specs](https://bustoutsolutions.github.io/siesta/specs/)\r\n\r\n## What’s It For?\r\n\r\n### The Problem\r\n\r\nWant your app to talk to an API? Welcome to your state nightmare!\r\n\r\nYou need to display response data whenever it arrives, unless the requesting ViewController is no longer visible, unless some other currently visible ViewController happens to want the same data. You should show a loading indicator, display user-friendly errors (but no modal alert dogpiles!), give users a retry mechanism, and hide all that when a subsequent request succeeds. Be sure to avoid redundant requests. Oh, and remember not to retain your ViewController by accident in your callback closures.\r\n\r\nWhat could possibly go wrong?\r\n\r\n### The Solution\r\n\r\nSiesta ends this headache by providing an observable model of a RESTful resource’s state. The model answers three basic questions:\r\n\r\n* What is the latest data for this resource, if any?\r\n* Did the latest request result in an error?\r\n* Is there a request in progress?\r\n\r\n…then provides notifications whenever the answers to these questions change.\r\n\r\nSiesta handles all the transitions and corner cases to deliver these answers wrapped up with a pretty bow on top, letting you focus on your UI.\r\n\r\n## Features\r\n\r\n- [x] Decouples UI component lifecycles from network request lifecycles\r\n- [x] Eliminates error-prone state tracking logic\r\n- [x] Eliminates redundant network requests\r\n- [x] Unified reporting for all errors: encoding, network, server-side, and parsing\r\n- [x] Transparent Etag / If-Modified-Since handling\r\n- [x] Painless handling for JSON and plain text, plus customizable response transformation\r\n- [x] Prebaked UI for loading & error handling\r\n- [x] Uses [Alamofire](https://github.com/Alamofire/Alamofire) for networking by default;\r\n        inject a custom networking provider if you want to use a different networking library\r\n- [x] Debug-friendly, customizable logging\r\n- [x] Written in Swift with a great [Swift-centric API](https://bustoutsolutions.github.io/siesta/api/), but…\r\n- [x] …also works great from Objective-C thanks to a compatibility layer\r\n- [x] [Robust regression tests](https://bustoutsolutions.github.io/siesta/specs/)\r\n- [x] [Documentation](Docs/index.md)\r\n\r\n**Forthcoming:**\r\n\r\n- [ ] Graceful handling for authenticated sessions\r\n- [ ] Intelligent progress reporting that accounts for request, latency, and response\r\n- [ ] Customizable data caching\r\n\r\n## Design Philosophy\r\n\r\nMake the default thing the right thing most of the time.\r\n\r\nMake the right thing easy all of the time.\r\n\r\nBuild from need. Don’t invent solutions in search of problems.\r\n\r\nDesign the API with these goals:\r\n\r\n1. Make client code easy to **read**.\r\n2. Make client code easy to **write**.\r\n3. Keep the API clean.\r\n4. Keep the implementation tidy.\r\n\r\n_…in that order of priority._\r\n\r\n## Installation\r\n\r\nWe recommend adding Siesta to your project using Carthage. You can also manually build the framework yourself.\r\n\r\n### Carthage\r\n\r\n[Install Carthage](https://github.com/Carthage/Carthage#installing-carthage).\r\n\r\nSiesta requires Swift 2.0, so install the latest [Xcode 7 beta](https://developer.apple.com/xcode/downloads/), and point the command line tools at it:\r\n\r\n    sudo xcode-select -s /Applications/Xcode-beta.app/Contents/Developer\r\n\r\nCreate a `Cartfile` in the root of your project if it don’t already exist, and add:\r\n\r\n    github \"bustoutsolutions/siesta\" \"master\"\r\n\r\n(Adding `master` keeps you on the bleeding edge, which is necessary until Siesta has an official release.)\r\n\r\nFollow the [Carthage instructions](https://github.com/Carthage/Carthage#adding-frameworks-to-an-application) to add `Siesta.framework` to your project.\r\n\r\nAs of this writing, there is one additional step you need to follow for Xcode 7 beta that isn’t in the Carthage docs:\r\n\r\n* Build settings → Framework search paths → `$(PROJECT_DIR)/Carthage/Build/iOS/`\r\n\r\n(In-depth discussion of Carthage on XC7 is [here](https://github.com/Carthage/Carthage/issues/536).)\r\n\r\nOnce you have the framework in your project, import Siesta and let the fun begin:\r\n\r\n```swift\r\nimport Siesta\r\n```\r\n\r\n### CocoaPods\r\n\r\nComing soon, no later than when Xcode 7 goes out of beta.\r\n\r\n## Basic Usage\r\n\r\nMake a singleton for the REST API you want to use:\r\n\r\n```swift\r\nlet MyAPI = Service(base: \"https://api.example.com\")\r\n```\r\n\r\nNow register your view controller — or view, or anything you like — to receive notifications whenever the resource’s state changes:\r\n\r\n```swift\r\noverride func viewDidLoad() {\r\n    super.viewDidLoad()\r\n\r\n    MyAPI.resource(\"/profile\").addObserver(self) { resource, event in\r\n        let json = resource.dictContent\r\n        nameLabel.text = json[\"name\"] as? String\r\n        favoriteColorLabel.text = json[\"favoriteColor\"] as? String\r\n\r\n        errorLabel.text = resource.latestError?.userMessage\r\n    }\r\n}\r\n```\r\n\r\nTrigger a staleness-aware load when the view appears:\r\n\r\n```swift\r\noverride func viewWillAppear(animated: Bool) {\r\n    MyAPI.resource(\"/profile\").loadIfNeeded()\r\n}\r\n```\r\n\r\n…and you have a networked UI.\r\n\r\nAdd a loading indicator:\r\n\r\n```swift\r\nMyAPI.resource(\"/profile\").addObserver(self) { resource, event in\r\n    if resource.loading {\r\n        activityIndicator.startAnimating()\r\n    } else {\r\n        activityIndicator.stopAnimating()\r\n    }\r\n}\r\n```\r\n\r\n…or better yet, use Siesta’s prebaked UI component to get an activity indicator, a nicely formatted error message, and a retry button for free:\r\n\r\n```swift\r\nclass ProfileViewController: UIViewController, ResourceObserver {\r\n    @IBOutlet weak var nameLabel, favoriteColorLabel: UILabel!\r\n    \r\n    let statusOverlay = ResourceStatusOverlay()\r\n\r\n    override func viewDidLoad() {\r\n        super.viewDidLoad()\r\n\r\n        statusOverlay.embedIn(self)\r\n\r\n        MyAPI.resource(\"/profile\")\r\n            .addObserver(self)\r\n            .addObserver(statusOverlay)\r\n    }\r\n\r\n    override func viewDidLayoutSubviews() {\r\n        statusOverlay.positionToCoverParent()\r\n    }\r\n    \r\n    override func viewWillAppear(animated: Bool) {\r\n        super.viewWillAppear(animated)\r\n        MyAPI.resource(\"/profile\").loadIfNeeded()\r\n    }\r\n\r\n    func resourceChanged(resource: Resource, event: ResourceEvent) {\r\n        let json = resource.dictContent\r\n        nameLabel.text = json[\"name\"] as? String\r\n        favoriteColorLabel.text = json[\"favoriteColor\"] as? String\r\n    }\r\n}\r\n```\r\n\r\nNote that this is not just a toy example. Together with its storyboard, **this small piece of code is a fully armed and operational REST-backed user interface**, complete with an activity indicator, content-type-aware threaded parsing, robust error handling, refresh throttling, and app-wide response data sharing.\r\n\r\nSee the [user guide](Docs/index.md) and [API documentation](https://bustoutsolutions.github.io/siesta/api/) for more info.\r\n\r\n## Examples\r\n\r\nThis repo includes a [simple example project](Examples/GithubBrowser).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}