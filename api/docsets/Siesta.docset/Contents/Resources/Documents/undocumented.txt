Networking-Alamofire.swift
	public let manager: Manager
	public init(manager: Manager = Manager.sharedInstance)
	public init(configuration: NSURLSessionConfiguration)
	public func networkingForRequest(request: NSURLRequest) -> RequestNetworking
ResourceStatusOverlay.swift
	@IBOutlet public var loadingIndicator: UIActivityIndicatorView?
	@IBOutlet public var errorView: UIView?
	@IBOutlet public var errorHeadline: UILabel?
	@IBOutlet public var errorDetail: UILabel?
	public convenience init()
	public convenience init(
            nibName: String,
            bundle: NSBundle = NSBundle.mainBundle())
	public required init?(coder: NSCoder)
        { super.init(coder: coder) }
	public func embedIn(parentViewController: UIViewController) -> Self
	public func positionToCoverParent()
	public func positionToCover(view: UIView)
	public func resourceChanged(resource: Resource, event: ResourceEvent)
	public func stoppedObservingResource(resource: Resource)
	@IBAction public func retryFailedRequests()
PersistentCache.swift
	public protocol EntityCache
	func readEntity(forUrl url: NSURL) -> Entity?
	func writeEntity(entity: Entity, forUrl: NSURL)
	public protocol EntityEncoder
	func encodeEntity(entity: Entity) -> NSData?
	func decodeEntity(data: NSData) -> Entity?
	public struct JSONEntityEncoder: EntityEncoder
	public init() { }
	public func encodeEntity(entity: Entity) -> NSData?
	public func decodeEntity(data: NSData) -> Entity?
